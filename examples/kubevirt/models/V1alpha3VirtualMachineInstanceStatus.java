/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubernetes.client.kubevirt.models;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Status is the high level overview of how the VirtualMachineInstance is doing. It contains information available to controllers and users.
 */
@ApiModel(description = "Status is the high level overview of how the VirtualMachineInstance is doing. It contains information available to controllers and users.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-11-29T01:55:00.032Z[Etc/UTC]")
public class V1alpha3VirtualMachineInstanceStatus {
  public static final String SERIALIZED_NAME_ACTIVE_PODS = "activePods";
  @SerializedName(SERIALIZED_NAME_ACTIVE_PODS)
  private Map<String, String> activePods = null;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  private List<V1alpha3VirtualMachineInstanceStatusConditions> conditions = null;

  public static final String SERIALIZED_NAME_EVACUATION_NODE_NAME = "evacuationNodeName";
  @SerializedName(SERIALIZED_NAME_EVACUATION_NODE_NAME)
  private String evacuationNodeName;

  public static final String SERIALIZED_NAME_GUEST_O_S_INFO = "guestOSInfo";
  @SerializedName(SERIALIZED_NAME_GUEST_O_S_INFO)
  private V1alpha3VirtualMachineInstanceStatusGuestOSInfo guestOSInfo;

  public static final String SERIALIZED_NAME_INTERFACES = "interfaces";
  @SerializedName(SERIALIZED_NAME_INTERFACES)
  private List<V1alpha3VirtualMachineInstanceStatusInterfaces> interfaces = null;

  public static final String SERIALIZED_NAME_MIGRATION_METHOD = "migrationMethod";
  @SerializedName(SERIALIZED_NAME_MIGRATION_METHOD)
  private String migrationMethod;

  public static final String SERIALIZED_NAME_MIGRATION_STATE = "migrationState";
  @SerializedName(SERIALIZED_NAME_MIGRATION_STATE)
  private V1alpha3VirtualMachineInstanceStatusMigrationState migrationState;

  public static final String SERIALIZED_NAME_NODE_NAME = "nodeName";
  @SerializedName(SERIALIZED_NAME_NODE_NAME)
  private String nodeName;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private String phase;

  public static final String SERIALIZED_NAME_PHASE_TRANSITION_TIMESTAMPS = "phaseTransitionTimestamps";
  @SerializedName(SERIALIZED_NAME_PHASE_TRANSITION_TIMESTAMPS)
  private List<V1alpha3VirtualMachineInstanceStatusPhaseTransitionTimestamps> phaseTransitionTimestamps = null;

  public static final String SERIALIZED_NAME_QOS_CLASS = "qosClass";
  @SerializedName(SERIALIZED_NAME_QOS_CLASS)
  private String qosClass;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;


  public V1alpha3VirtualMachineInstanceStatus activePods(Map<String, String> activePods) {
    
    this.activePods = activePods;
    return this;
  }

  public V1alpha3VirtualMachineInstanceStatus putActivePodsItem(String key, String activePodsItem) {
    if (this.activePods == null) {
      this.activePods = new HashMap<>();
    }
    this.activePods.put(key, activePodsItem);
    return this;
  }

   /**
   * ActivePods is a mapping of pod UID to node name. It is possible for multiple pods to be running for a single VMI during migration.
   * @return activePods
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ActivePods is a mapping of pod UID to node name. It is possible for multiple pods to be running for a single VMI during migration.")

  public Map<String, String> getActivePods() {
    return activePods;
  }


  public void setActivePods(Map<String, String> activePods) {
    this.activePods = activePods;
  }


  public V1alpha3VirtualMachineInstanceStatus conditions(List<V1alpha3VirtualMachineInstanceStatusConditions> conditions) {
    
    this.conditions = conditions;
    return this;
  }

  public V1alpha3VirtualMachineInstanceStatus addConditionsItem(V1alpha3VirtualMachineInstanceStatusConditions conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * Conditions are specific points in VirtualMachineInstance&#39;s pod runtime.
   * @return conditions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Conditions are specific points in VirtualMachineInstance's pod runtime.")

  public List<V1alpha3VirtualMachineInstanceStatusConditions> getConditions() {
    return conditions;
  }


  public void setConditions(List<V1alpha3VirtualMachineInstanceStatusConditions> conditions) {
    this.conditions = conditions;
  }


  public V1alpha3VirtualMachineInstanceStatus evacuationNodeName(String evacuationNodeName) {
    
    this.evacuationNodeName = evacuationNodeName;
    return this;
  }

   /**
   * EvacuationNodeName is used to track the eviction process of a VMI. It stores the name of the node that we want to evacuate. It is meant to be used by KubeVirt core components only and can&#39;t be set or modified by users.
   * @return evacuationNodeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "EvacuationNodeName is used to track the eviction process of a VMI. It stores the name of the node that we want to evacuate. It is meant to be used by KubeVirt core components only and can't be set or modified by users.")

  public String getEvacuationNodeName() {
    return evacuationNodeName;
  }


  public void setEvacuationNodeName(String evacuationNodeName) {
    this.evacuationNodeName = evacuationNodeName;
  }


  public V1alpha3VirtualMachineInstanceStatus guestOSInfo(V1alpha3VirtualMachineInstanceStatusGuestOSInfo guestOSInfo) {
    
    this.guestOSInfo = guestOSInfo;
    return this;
  }

   /**
   * Get guestOSInfo
   * @return guestOSInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1alpha3VirtualMachineInstanceStatusGuestOSInfo getGuestOSInfo() {
    return guestOSInfo;
  }


  public void setGuestOSInfo(V1alpha3VirtualMachineInstanceStatusGuestOSInfo guestOSInfo) {
    this.guestOSInfo = guestOSInfo;
  }


  public V1alpha3VirtualMachineInstanceStatus interfaces(List<V1alpha3VirtualMachineInstanceStatusInterfaces> interfaces) {
    
    this.interfaces = interfaces;
    return this;
  }

  public V1alpha3VirtualMachineInstanceStatus addInterfacesItem(V1alpha3VirtualMachineInstanceStatusInterfaces interfacesItem) {
    if (this.interfaces == null) {
      this.interfaces = new ArrayList<>();
    }
    this.interfaces.add(interfacesItem);
    return this;
  }

   /**
   * Interfaces represent the details of available network interfaces.
   * @return interfaces
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Interfaces represent the details of available network interfaces.")

  public List<V1alpha3VirtualMachineInstanceStatusInterfaces> getInterfaces() {
    return interfaces;
  }


  public void setInterfaces(List<V1alpha3VirtualMachineInstanceStatusInterfaces> interfaces) {
    this.interfaces = interfaces;
  }


  public V1alpha3VirtualMachineInstanceStatus migrationMethod(String migrationMethod) {
    
    this.migrationMethod = migrationMethod;
    return this;
  }

   /**
   * Represents the method using which the vmi can be migrated: live migration or block migration
   * @return migrationMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Represents the method using which the vmi can be migrated: live migration or block migration")

  public String getMigrationMethod() {
    return migrationMethod;
  }


  public void setMigrationMethod(String migrationMethod) {
    this.migrationMethod = migrationMethod;
  }


  public V1alpha3VirtualMachineInstanceStatus migrationState(V1alpha3VirtualMachineInstanceStatusMigrationState migrationState) {
    
    this.migrationState = migrationState;
    return this;
  }

   /**
   * Get migrationState
   * @return migrationState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1alpha3VirtualMachineInstanceStatusMigrationState getMigrationState() {
    return migrationState;
  }


  public void setMigrationState(V1alpha3VirtualMachineInstanceStatusMigrationState migrationState) {
    this.migrationState = migrationState;
  }


  public V1alpha3VirtualMachineInstanceStatus nodeName(String nodeName) {
    
    this.nodeName = nodeName;
    return this;
  }

   /**
   * NodeName is the name where the VirtualMachineInstance is currently running.
   * @return nodeName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "NodeName is the name where the VirtualMachineInstance is currently running.")

  public String getNodeName() {
    return nodeName;
  }


  public void setNodeName(String nodeName) {
    this.nodeName = nodeName;
  }


  public V1alpha3VirtualMachineInstanceStatus phase(String phase) {
    
    this.phase = phase;
    return this;
  }

   /**
   * Phase is the status of the VirtualMachineInstance in kubernetes world. It is not the VirtualMachineInstance status, but partially correlates to it.
   * @return phase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Phase is the status of the VirtualMachineInstance in kubernetes world. It is not the VirtualMachineInstance status, but partially correlates to it.")

  public String getPhase() {
    return phase;
  }


  public void setPhase(String phase) {
    this.phase = phase;
  }


  public V1alpha3VirtualMachineInstanceStatus phaseTransitionTimestamps(List<V1alpha3VirtualMachineInstanceStatusPhaseTransitionTimestamps> phaseTransitionTimestamps) {
    
    this.phaseTransitionTimestamps = phaseTransitionTimestamps;
    return this;
  }

  public V1alpha3VirtualMachineInstanceStatus addPhaseTransitionTimestampsItem(V1alpha3VirtualMachineInstanceStatusPhaseTransitionTimestamps phaseTransitionTimestampsItem) {
    if (this.phaseTransitionTimestamps == null) {
      this.phaseTransitionTimestamps = new ArrayList<>();
    }
    this.phaseTransitionTimestamps.add(phaseTransitionTimestampsItem);
    return this;
  }

   /**
   * PhaseTransitionTimestamp is the timestamp of when the last phase change occurred
   * @return phaseTransitionTimestamps
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "PhaseTransitionTimestamp is the timestamp of when the last phase change occurred")

  public List<V1alpha3VirtualMachineInstanceStatusPhaseTransitionTimestamps> getPhaseTransitionTimestamps() {
    return phaseTransitionTimestamps;
  }


  public void setPhaseTransitionTimestamps(List<V1alpha3VirtualMachineInstanceStatusPhaseTransitionTimestamps> phaseTransitionTimestamps) {
    this.phaseTransitionTimestamps = phaseTransitionTimestamps;
  }


  public V1alpha3VirtualMachineInstanceStatus qosClass(String qosClass) {
    
    this.qosClass = qosClass;
    return this;
  }

   /**
   * The Quality of Service (QOS) classification assigned to the virtual machine instance based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
   * @return qosClass
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Quality of Service (QOS) classification assigned to the virtual machine instance based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md")

  public String getQosClass() {
    return qosClass;
  }


  public void setQosClass(String qosClass) {
    this.qosClass = qosClass;
  }


  public V1alpha3VirtualMachineInstanceStatus reason(String reason) {
    
    this.reason = reason;
    return this;
  }

   /**
   * A brief CamelCase message indicating details about why the VMI is in this state. e.g. &#39;NodeUnresponsive&#39;
   * @return reason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A brief CamelCase message indicating details about why the VMI is in this state. e.g. 'NodeUnresponsive'")

  public String getReason() {
    return reason;
  }


  public void setReason(String reason) {
    this.reason = reason;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha3VirtualMachineInstanceStatus v1alpha3VirtualMachineInstanceStatus = (V1alpha3VirtualMachineInstanceStatus) o;
    return Objects.equals(this.activePods, v1alpha3VirtualMachineInstanceStatus.activePods) &&
        Objects.equals(this.conditions, v1alpha3VirtualMachineInstanceStatus.conditions) &&
        Objects.equals(this.evacuationNodeName, v1alpha3VirtualMachineInstanceStatus.evacuationNodeName) &&
        Objects.equals(this.guestOSInfo, v1alpha3VirtualMachineInstanceStatus.guestOSInfo) &&
        Objects.equals(this.interfaces, v1alpha3VirtualMachineInstanceStatus.interfaces) &&
        Objects.equals(this.migrationMethod, v1alpha3VirtualMachineInstanceStatus.migrationMethod) &&
        Objects.equals(this.migrationState, v1alpha3VirtualMachineInstanceStatus.migrationState) &&
        Objects.equals(this.nodeName, v1alpha3VirtualMachineInstanceStatus.nodeName) &&
        Objects.equals(this.phase, v1alpha3VirtualMachineInstanceStatus.phase) &&
        Objects.equals(this.phaseTransitionTimestamps, v1alpha3VirtualMachineInstanceStatus.phaseTransitionTimestamps) &&
        Objects.equals(this.qosClass, v1alpha3VirtualMachineInstanceStatus.qosClass) &&
        Objects.equals(this.reason, v1alpha3VirtualMachineInstanceStatus.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activePods, conditions, evacuationNodeName, guestOSInfo, interfaces, migrationMethod, migrationState, nodeName, phase, phaseTransitionTimestamps, qosClass, reason);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha3VirtualMachineInstanceStatus {\n");
    sb.append("    activePods: ").append(toIndentedString(activePods)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    evacuationNodeName: ").append(toIndentedString(evacuationNodeName)).append("\n");
    sb.append("    guestOSInfo: ").append(toIndentedString(guestOSInfo)).append("\n");
    sb.append("    interfaces: ").append(toIndentedString(interfaces)).append("\n");
    sb.append("    migrationMethod: ").append(toIndentedString(migrationMethod)).append("\n");
    sb.append("    migrationState: ").append(toIndentedString(migrationState)).append("\n");
    sb.append("    nodeName: ").append(toIndentedString(nodeName)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    phaseTransitionTimestamps: ").append(toIndentedString(phaseTransitionTimestamps)).append("\n");
    sb.append("    qosClass: ").append(toIndentedString(qosClass)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

