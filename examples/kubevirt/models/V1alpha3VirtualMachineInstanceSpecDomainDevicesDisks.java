/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubernetes.client.kubevirt.models;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

/**
 * V1alpha3VirtualMachineInstanceSpecDomainDevicesDisks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-11-29T01:55:00.032Z[Etc/UTC]")
public class V1alpha3VirtualMachineInstanceSpecDomainDevicesDisks {
  public static final String SERIALIZED_NAME_BOOT_ORDER = "bootOrder";
  @SerializedName(SERIALIZED_NAME_BOOT_ORDER)
  private Integer bootOrder;

  public static final String SERIALIZED_NAME_CACHE = "cache";
  @SerializedName(SERIALIZED_NAME_CACHE)
  private String cache;

  public static final String SERIALIZED_NAME_CDROM = "cdrom";
  @SerializedName(SERIALIZED_NAME_CDROM)
  private V1alpha3VirtualMachineInstanceSpecDomainDevicesCdrom cdrom;

  public static final String SERIALIZED_NAME_DEDICATED_I_O_THREAD = "dedicatedIOThread";
  @SerializedName(SERIALIZED_NAME_DEDICATED_I_O_THREAD)
  private Boolean dedicatedIOThread;

  public static final String SERIALIZED_NAME_DISK = "disk";
  @SerializedName(SERIALIZED_NAME_DISK)
  private V1alpha3VirtualMachineInstanceSpecDomainDevicesDisk disk;

  public static final String SERIALIZED_NAME_FLOPPY = "floppy";
  @SerializedName(SERIALIZED_NAME_FLOPPY)
  private V1alpha3VirtualMachineInstanceSpecDomainDevicesFloppy floppy;

  public static final String SERIALIZED_NAME_IO = "io";
  @SerializedName(SERIALIZED_NAME_IO)
  private String io;

  public static final String SERIALIZED_NAME_LUN = "lun";
  @SerializedName(SERIALIZED_NAME_LUN)
  private V1alpha3VirtualMachineInstanceSpecDomainDevicesLun lun;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SERIAL = "serial";
  @SerializedName(SERIALIZED_NAME_SERIAL)
  private String serial;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;


  public V1alpha3VirtualMachineInstanceSpecDomainDevicesDisks bootOrder(Integer bootOrder) {
    
    this.bootOrder = bootOrder;
    return this;
  }

   /**
   * BootOrder is an integer value &gt; 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists.
   * @return bootOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists.")

  public Integer getBootOrder() {
    return bootOrder;
  }


  public void setBootOrder(Integer bootOrder) {
    this.bootOrder = bootOrder;
  }


  public V1alpha3VirtualMachineInstanceSpecDomainDevicesDisks cache(String cache) {
    
    this.cache = cache;
    return this;
  }

   /**
   * Cache specifies which kvm disk cache mode should be used.
   * @return cache
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Cache specifies which kvm disk cache mode should be used.")

  public String getCache() {
    return cache;
  }


  public void setCache(String cache) {
    this.cache = cache;
  }


  public V1alpha3VirtualMachineInstanceSpecDomainDevicesDisks cdrom(V1alpha3VirtualMachineInstanceSpecDomainDevicesCdrom cdrom) {
    
    this.cdrom = cdrom;
    return this;
  }

   /**
   * Get cdrom
   * @return cdrom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1alpha3VirtualMachineInstanceSpecDomainDevicesCdrom getCdrom() {
    return cdrom;
  }


  public void setCdrom(V1alpha3VirtualMachineInstanceSpecDomainDevicesCdrom cdrom) {
    this.cdrom = cdrom;
  }


  public V1alpha3VirtualMachineInstanceSpecDomainDevicesDisks dedicatedIOThread(Boolean dedicatedIOThread) {
    
    this.dedicatedIOThread = dedicatedIOThread;
    return this;
  }

   /**
   * dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads &#x3D; true. Defaults to false.
   * @return dedicatedIOThread
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false.")

  public Boolean getDedicatedIOThread() {
    return dedicatedIOThread;
  }


  public void setDedicatedIOThread(Boolean dedicatedIOThread) {
    this.dedicatedIOThread = dedicatedIOThread;
  }


  public V1alpha3VirtualMachineInstanceSpecDomainDevicesDisks disk(V1alpha3VirtualMachineInstanceSpecDomainDevicesDisk disk) {
    
    this.disk = disk;
    return this;
  }

   /**
   * Get disk
   * @return disk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1alpha3VirtualMachineInstanceSpecDomainDevicesDisk getDisk() {
    return disk;
  }


  public void setDisk(V1alpha3VirtualMachineInstanceSpecDomainDevicesDisk disk) {
    this.disk = disk;
  }


  public V1alpha3VirtualMachineInstanceSpecDomainDevicesDisks floppy(V1alpha3VirtualMachineInstanceSpecDomainDevicesFloppy floppy) {
    
    this.floppy = floppy;
    return this;
  }

   /**
   * Get floppy
   * @return floppy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1alpha3VirtualMachineInstanceSpecDomainDevicesFloppy getFloppy() {
    return floppy;
  }


  public void setFloppy(V1alpha3VirtualMachineInstanceSpecDomainDevicesFloppy floppy) {
    this.floppy = floppy;
  }


  public V1alpha3VirtualMachineInstanceSpecDomainDevicesDisks io(String io) {
    
    this.io = io;
    return this;
  }

   /**
   * IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads.
   * @return io
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads.")

  public String getIo() {
    return io;
  }


  public void setIo(String io) {
    this.io = io;
  }


  public V1alpha3VirtualMachineInstanceSpecDomainDevicesDisks lun(V1alpha3VirtualMachineInstanceSpecDomainDevicesLun lun) {
    
    this.lun = lun;
    return this;
  }

   /**
   * Get lun
   * @return lun
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1alpha3VirtualMachineInstanceSpecDomainDevicesLun getLun() {
    return lun;
  }


  public void setLun(V1alpha3VirtualMachineInstanceSpecDomainDevicesLun lun) {
    this.lun = lun;
  }


  public V1alpha3VirtualMachineInstanceSpecDomainDevicesDisks name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name is the device name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Name is the device name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public V1alpha3VirtualMachineInstanceSpecDomainDevicesDisks serial(String serial) {
    
    this.serial = serial;
    return this;
  }

   /**
   * Serial provides the ability to specify a serial number for the disk device.
   * @return serial
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Serial provides the ability to specify a serial number for the disk device.")

  public String getSerial() {
    return serial;
  }


  public void setSerial(String serial) {
    this.serial = serial;
  }


  public V1alpha3VirtualMachineInstanceSpecDomainDevicesDisks tag(String tag) {
    
    this.tag = tag;
    return this;
  }

   /**
   * If specified, disk address and its tag will be provided to the guest via config drive metadata
   * @return tag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If specified, disk address and its tag will be provided to the guest via config drive metadata")

  public String getTag() {
    return tag;
  }


  public void setTag(String tag) {
    this.tag = tag;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha3VirtualMachineInstanceSpecDomainDevicesDisks v1alpha3VirtualMachineInstanceSpecDomainDevicesDisks = (V1alpha3VirtualMachineInstanceSpecDomainDevicesDisks) o;
    return Objects.equals(this.bootOrder, v1alpha3VirtualMachineInstanceSpecDomainDevicesDisks.bootOrder) &&
        Objects.equals(this.cache, v1alpha3VirtualMachineInstanceSpecDomainDevicesDisks.cache) &&
        Objects.equals(this.cdrom, v1alpha3VirtualMachineInstanceSpecDomainDevicesDisks.cdrom) &&
        Objects.equals(this.dedicatedIOThread, v1alpha3VirtualMachineInstanceSpecDomainDevicesDisks.dedicatedIOThread) &&
        Objects.equals(this.disk, v1alpha3VirtualMachineInstanceSpecDomainDevicesDisks.disk) &&
        Objects.equals(this.floppy, v1alpha3VirtualMachineInstanceSpecDomainDevicesDisks.floppy) &&
        Objects.equals(this.io, v1alpha3VirtualMachineInstanceSpecDomainDevicesDisks.io) &&
        Objects.equals(this.lun, v1alpha3VirtualMachineInstanceSpecDomainDevicesDisks.lun) &&
        Objects.equals(this.name, v1alpha3VirtualMachineInstanceSpecDomainDevicesDisks.name) &&
        Objects.equals(this.serial, v1alpha3VirtualMachineInstanceSpecDomainDevicesDisks.serial) &&
        Objects.equals(this.tag, v1alpha3VirtualMachineInstanceSpecDomainDevicesDisks.tag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bootOrder, cache, cdrom, dedicatedIOThread, disk, floppy, io, lun, name, serial, tag);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha3VirtualMachineInstanceSpecDomainDevicesDisks {\n");
    sb.append("    bootOrder: ").append(toIndentedString(bootOrder)).append("\n");
    sb.append("    cache: ").append(toIndentedString(cache)).append("\n");
    sb.append("    cdrom: ").append(toIndentedString(cdrom)).append("\n");
    sb.append("    dedicatedIOThread: ").append(toIndentedString(dedicatedIOThread)).append("\n");
    sb.append("    disk: ").append(toIndentedString(disk)).append("\n");
    sb.append("    floppy: ").append(toIndentedString(floppy)).append("\n");
    sb.append("    io: ").append(toIndentedString(io)).append("\n");
    sb.append("    lun: ").append(toIndentedString(lun)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    serial: ").append(toIndentedString(serial)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

