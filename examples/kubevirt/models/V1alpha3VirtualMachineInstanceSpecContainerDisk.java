/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.21.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubernetes.client.kubevirt.models;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * ContainerDisk references a docker image, embedding a qcow or raw disk. More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html
 */
@ApiModel(description = "ContainerDisk references a docker image, embedding a qcow or raw disk. More info: https://kubevirt.gitbooks.io/user-guide/registry-disk.html")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-11-29T01:55:00.032Z[Etc/UTC]")
public class V1alpha3VirtualMachineInstanceSpecContainerDisk {
  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_IMAGE_PULL_POLICY = "imagePullPolicy";
  @SerializedName(SERIALIZED_NAME_IMAGE_PULL_POLICY)
  private String imagePullPolicy;

  public static final String SERIALIZED_NAME_IMAGE_PULL_SECRET = "imagePullSecret";
  @SerializedName(SERIALIZED_NAME_IMAGE_PULL_SECRET)
  private String imagePullSecret;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;


  public V1alpha3VirtualMachineInstanceSpecContainerDisk image(String image) {
    
    this.image = image;
    return this;
  }

   /**
   * Image is the name of the image with the embedded disk.
   * @return image
  **/
  @ApiModelProperty(required = true, value = "Image is the name of the image with the embedded disk.")

  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    this.image = image;
  }


  public V1alpha3VirtualMachineInstanceSpecContainerDisk imagePullPolicy(String imagePullPolicy) {
    
    this.imagePullPolicy = imagePullPolicy;
    return this;
  }

   /**
   * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
   * @return imagePullPolicy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images")

  public String getImagePullPolicy() {
    return imagePullPolicy;
  }


  public void setImagePullPolicy(String imagePullPolicy) {
    this.imagePullPolicy = imagePullPolicy;
  }


  public V1alpha3VirtualMachineInstanceSpecContainerDisk imagePullSecret(String imagePullSecret) {
    
    this.imagePullSecret = imagePullSecret;
    return this;
  }

   /**
   * ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.
   * @return imagePullSecret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ImagePullSecret is the name of the Docker registry secret required to pull the image. The secret must already exist.")

  public String getImagePullSecret() {
    return imagePullSecret;
  }


  public void setImagePullSecret(String imagePullSecret) {
    this.imagePullSecret = imagePullSecret;
  }


  public V1alpha3VirtualMachineInstanceSpecContainerDisk path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * Path defines the path to disk file in the container
   * @return path
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Path defines the path to disk file in the container")

  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    this.path = path;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1alpha3VirtualMachineInstanceSpecContainerDisk v1alpha3VirtualMachineInstanceSpecContainerDisk = (V1alpha3VirtualMachineInstanceSpecContainerDisk) o;
    return Objects.equals(this.image, v1alpha3VirtualMachineInstanceSpecContainerDisk.image) &&
        Objects.equals(this.imagePullPolicy, v1alpha3VirtualMachineInstanceSpecContainerDisk.imagePullPolicy) &&
        Objects.equals(this.imagePullSecret, v1alpha3VirtualMachineInstanceSpecContainerDisk.imagePullSecret) &&
        Objects.equals(this.path, v1alpha3VirtualMachineInstanceSpecContainerDisk.path);
  }

  @Override
  public int hashCode() {
    return Objects.hash(image, imagePullPolicy, imagePullSecret, path);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1alpha3VirtualMachineInstanceSpecContainerDisk {\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imagePullPolicy: ").append(toIndentedString(imagePullPolicy)).append("\n");
    sb.append("    imagePullSecret: ").append(toIndentedString(imagePullSecret)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

